global.r

library(shiny)
library(quantmod)
library(tidyverse)
library(zoo)
library(lubridate)
library(scales)
library(stringr)

# ss <- stockSymbols() %>% as_data_frame() %>% 
#   mutate(opts = paste0(Name, " (", Symbol, ")"))
# 
# apple_opts <- ss %>% 
#   filter(Symbol == "AAPL") %>% 
#   select(opts) %>% 
#   `[[`(1)

sources <- c("yahoo", "google")
# sources <- c("yahoo", "google", "MySQL", "FRED", "csv", "RData", "oanda")

stock <- c("AAPL", "GOOG", "FB", "AMZN", "MSFT")


server.r


shinyServer(function(input, output, session) {

  # Storing the data 
  stock <- reactiveValues(
    data      = NULL,
    cagr      = NULL,
    plot_data = NULL
  )
  
  # Listen to the source input
  observeEvent({
    input$source 
    input$stock
    }, {
    
    # Load the data
    getSymbols(input$stock, src = input$source)

    # Mutate to data frame
    if(input$stock == "AAPL") {
      stock$data <- bind_cols(
        data_frame(Date = index(AAPL)),
        as_data_frame(AAPL))
    } else if(input$stock == "GOOG") {
      stock$data <- bind_cols(
        data_frame(Date = index(GOOG)),
        as_data_frame(GOOG))
    } else if(input$stock == "FB") {
      stock$data <- bind_cols(
        data_frame(Date = index(FB)),
        as_data_frame(FB))
    } else if(input$stock == "AMZN") {
      stock$data <- bind_cols(
        data_frame(Date = index(AMZN)),
        as_data_frame(AMZN))
    } else if(input$stock == "MSFT") {
      stock$data <- bind_cols(
        data_frame(Date = index(MSFT)),
        as_data_frame(MSFT))
    }
    
    names(stock$data) <- c("Date", "Open", "High", "Low", "Close", "Volume")
      
    # Calculate cagr data
    stock$cagr <- stock$data %>%
      select(Date, 
             t_0    = Close) %>% 
      mutate(Date_0 = Date,
             Date_n = lead(Date_0),
             t_n    = lead(t_0),
             cagr   = round(100 * ((t_n / t_0)^(1 / 252) - 1), 3)) %>% 
      filter(!is.na(cagr))
  })
  
  # Calculate cagr for selected period
  observe({
    if(!is.null(stock$cagr) & !is.null(input$fltr_date) & !is.null(input$investment)) {
      # Subset columns and group by week and year
      plot_data <- stock$cagr %>% 
        filter(between(Date, input$fltr_date[1], input$fltr_date[2]))
 
      invest <- rep(NA, nrow(plot_data))
      for(i in seq_along(plot_data[[1]])) {
        if(i == 1) {
          invest[i] <- input$investment
        } else {
          invest[i] <- invest[i - 1] * (1 + plot_data[[i - 1, "cagr"]])
        }
      }
      
      stock$plot_data <- plot_data %>% 
        mutate(investment = round(invest, 2))
    }
  })

  
  # Generate filter UI
  output$fltr_date_ui <- renderUI({
    if(!is.null(stock$data)) {
      # date range of data
      date_min   <- min(stock$data$Date)
      date_max   <- max(stock$data$Date)
      date_start <- if_else(date_max - 30 > date_min, date_max - 30, date_min)
      
      # Create date range input
      rtrn <- list(
        div(p(strong("Choose date range")), style = "color:#efefef"),
        dateRangeInput("fltr_date", NULL, 
                       min = date_min, max = date_max,
                       start = date_start, end = date_max)
      )
    } else {
      rtrn <- NULL
    }
    rtrn
  })
  
  # Always force the second date to be at least equal to first date.
  observeEvent(input$fltr_date[2], {
    end_date = input$fltr_date[2]
    # If end date is earlier than start date, update the end date to be the same as the new start date
    if (input$fltr_date[2] < input$fltr_date[1]) {
      end_date = input$fltr_date[1]
    }
    updateDateRangeInput(session,"fltr_date", start=input$date_range[1], end=end_date)
  })
  
  # Generate plot without text labels
  base_plot_cagr <- reactive({
    if(!is.null(stock$plot_data)) {
      
      plot <- stock$plot_data %>% 
        mutate(CAGR = round(cagr, 3))
      plot <- plot %>% 
        ggplot(aes(x = Date, y = CAGR)) +
          theme_minimal() +
          geom_line(colour = "steelblue", size = 2) + 
          geom_point(colour = "darkred", size = 3) + 
          scale_x_date(name        = "Date",
                       date_breaks = "days",
                       labels      = date_format("%d-%m-%Y")) +
          ylab("(Daily)Compound Annual Growth Rate (%)") + 
          theme(axis.text.x = element_text(angle = 45, hjust = 1))

    } else { plot <- NULL }
    plot
  })
  
  # Return plot with or without labels
  output$plot_cagr <- renderPlot({
    if(!is.null(base_plot_cagr())) {
      
      # Get plot
      plot <- base_plot_cagr()
      
      # Get plot data
      gg <- ggplot_build(base_plot_cagr())
      # Find months in data, except first month
      x_months <- gg$layout$panel_ranges[[1]]$x.major_source %>% 
        as.Date() %>% 
        floor_date("month") %>% 
        unique()
      
      # Add labels for wide plot
      if(length(x_months) > 0) {
        y_labels <- gg$layout$panel_ranges[[1]]$y.major_source
        data_labels <- tibble(
          y = rep(y_labels, length(x_months[-1])),
          x = rep(x_months[-1], each = length(y_labels))
        )
        plot <- plot + 
          geom_text(data = data_labels, aes(y = y, x = x, label = paste0(y)), colour = "grey")
      }
      
      if(input$text_labels) {
        plot <- plot +
          geom_label(aes(label = paste0(CAGR)), nudge_y = 0.002, alpha = 0.85)
      } 
      # Return plot
      plot
    } else { NULL }
  })
  
  # Generate plot without text labels
  base_plot_inv <- reactive({
    if(!is.null(stock$plot_data)) {
      
      plot <- stock$plot_data %>% 
        mutate(Investment = round(investment, 3))
      plot <- plot %>% 
        ggplot(aes(x = Date, y = Investment)) +
        theme_minimal() +
        geom_line(colour = "green", size = 2) + 
        geom_point(colour = "steelblue", size = 3) + 
        scale_x_date(name        = "Date",
                     date_breaks = "days",
                     labels      = date_format("%d-%m-%Y")) +
        ylab("Investment") + 
        theme(axis.text.x = element_text(angle = 45, hjust = 1))

    } else { plot <- NULL }
    plot
  })
  
  # Return plot with or without labels
  output$plot_inv <- renderPlot({
    if(!is.null(base_plot_inv())) {
      # Get plot
      plot <- base_plot_inv()
      
      # Get plot data
      gg <- ggplot_build(base_plot_inv())
      # Find months in data, except first month
      x_months <- gg$layout$panel_ranges[[1]]$x.major_source %>% 
        as.Date() %>% 
        floor_date("month") %>% 
        unique()
      
      # Add labels for wide plot
      if(length(x_months) > 0) {
        y_labels <- gg$layout$panel_ranges[[1]]$y.major_source
        data_labels <- tibble(
          y = rep(y_labels, length(x_months[-1])),
          x = rep(x_months[-1], each = length(y_labels))
        )
        plot <- plot + 
          geom_text(data = data_labels, aes(y = y, x = x, label = paste0(y)), colour = "grey")
      }
      
      if(input$text_labels) {
        plot <- plot +
          geom_label(aes(label = paste0(Investment)), nudge_y = 0.002, alpha = 0.85)
      } 
      # Return plot
      plot
    } else { NULL }
  })
  

  # Generate the plot output with flexible width
  output$cagr_plot_ui <- renderUI({
    if(!is.null(stock$plot_data) & !is.null(input$fltr_date[2])) {
      wdth <- paste0(round(abs(input$fltr_date[1]-input$fltr_date[2]) * 4.4 * 6), "px")
      list(
        plotOutput("plot_cagr", width = wdth, height = "400px"),
        p(""),
        plotOutput("plot_inv", width = wdth, height = "400px")
      )
    }
  })
  
  # Message of first closing vlaue of selected dates
  output$closing_value <- renderText({
   if(!is.null(stock$plot_data) & !is.null(input$fltr_date[1])) {
    # val <- stock$plot_data[[1, "t_0"]]
     # paste0("The closing value on ", input$fltr_date[1], " was ", val)
    }
  })
  
  # Table with Date and CAGR rounded to two digits
  output$table <- renderDataTable({
    if(!is.null(stock$plot_data)) {
      stock$plot_data %>% 
        select(Date, CAGR = cagr, INVESTMENT = investment) %>% 
        mutate(Date = paste0(str_sub(as.character(Date), 9, 10),
                             str_sub(as.character(Date), 5, 8),
                             str_sub(as.character(Date), 1, 4)))
    } else { NULL }
  })
  
})


ui.r


shinyUI(fluidPage(
  tags$head(tags$style(
    HTML('
         body {
           background-color: #347812;
         }
         
         #well {
           background-color: #347812;
           border:0px;
         }')
  )),
  p(""),
  fluidRow(
    column(width = 4),
    column(width = 8, div(h2("Compound Annual Growth Rate")), style = "color:#efefef")
  ),
  hr(),
  fluidRow(
    column(width = 2),
    column(width = 2, 
           div(p(strong("Stock")), style = "color:#efefef"),
           selectInput("stock", NULL, choices = stock, selected = "AAPL")),
    column(width = 2, 
           div(p(strong("Data source")), style = "color:#efefef"),
           selectInput("source", NULL, choices = sources, selected = "google")),
    column(width = 1, 
           div(p(strong("Show labels")), style = "color:#efefef"),
           checkboxInput("text_labels", " ", FALSE)),
    column(width = 3, uiOutput("fltr_date_ui")),
    column(width = 3)
  ),
  fluidRow(
    column(width = 2),
    column(width = 8, 
           div(p(strong("Investment")), style = "color:#efefef"),
           numericInput("investment", NULL, value = 100, min = 1)),
    column(width = 2)
  ),
  fluidRow(
    column(width = 2),
    column(width = 8, 
           div(textOutput("closing_value"), style = "color:#efefef"),
           wellPanel(id = "well",
                     style = "overflow-x:auto; max-width: 100%; align:center;",
                     div(uiOutput("cagr_plot_ui"), align = "center"))),
    column(width = 2)
  ),
  fluidRow(
    column(width = 2),
    column(width = 8, div(dataTableOutput("table"), 
                          style = "color:#121212; background-color: #ffffff;")),
    column(width = 2)
  ),
  p("")
))
